crystal_doc_search_index_callback({"repository_name":"github.com/dtcristo/phoenix.cr","body":"# phoenix.cr\n\nCrystal client for [Phoenix](http://phoenixframework.org/) [Channels](https://hexdocs.pm/phoenix/channels.html), based off the official JavaScript [reference implementation](https://github.com/phoenixframework/phoenix/blob/5ec246543e0950e10eab52aba333b644767c885e/assets/js/phoenix.js).\n\nAPI documentation available [here](https://dtcristo.github.io/phoenix.cr/).\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  phoenix:\n    github: dtcristo/phoenix.cr\n```\n\n## Usage\n\nThe example below shows basic usage; connecting to a socket, joining a channel, binding to an event and sending messages.\n\n```crystal\nrequire \"phoenix\"\n\n# Create socket and connect to it\nsocket = Phoenix::Socket.new(\"http://example.com/socket\")\nsocket.connect\n\n# Initiate a channel, bind to an event and join\nchannel = socket.channel(\"topic:subtopic\")\nchannel.on \"event\" do |payload|\n  # do stuff with payload\nend\nchannel.join\n\n# Start a loop and send a message down the channel every second\nloop do\n  sleep 1\n  channel.push(\"new_msg\", JSON::Any.new({\"text\" => JSON::Any.new(\"Hello world!\")}))\nend\n```\n\nThe Phoenix Channels [docs](https://hexdocs.pm/phoenix/channels.html) provide details on implementing sockets and channels on the server side. The phoenix.cr [docs](https://dtcristo.github.io/phoenix.cr/) detail the client side API available for use in your Crystal application.\n\n## Chat example\n\n[examples/chat.cr](https://github.com/dtcristo/phoenix.cr/blob/master/examples/chat.cr) demonstates an example chat client.\n\nStart the [phoenix-chat](https://github.com/dtcristo/phoenix-chat) server example:\n\n```sh\ngit clone https://github.com/dtcristo/phoenix-chat\ncd phoenix-chat\nmix deps.get\nmix phx.server\n```\n\nRun the chat client:\n\n```sh\ncrystal examples/chat.cr\n```\n\nFollow the prompts to enter your name and chat away.\n\n## TODO\n\n- Add tests\n- Implement Presence\n- Build larger example application\n\n## Contributors\n\n- [dtcristo](https://github.com/dtcristo) David Cristofaro - creator, maintainer\n\n## Credits\n\n- Thanks [chrismccord](https://github.com/chrismccord) and the [Phoenix team](https://github.com/phoenixframework/phoenix/graphs/contributors) for building an amazing web framework.\n","program":{"html_id":"github.com/dtcristo/phoenix.cr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/dtcristo/phoenix.cr","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/dtcristo/phoenix.cr/Phoenix","path":"Phoenix.html","kind":"module","full_name":"Phoenix","name":"Phoenix","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"phoenix/channel.cr","line_number":1,"url":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr"},{"filename":"phoenix/message.cr","line_number":1,"url":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/message.cr"},{"filename":"phoenix/push.cr","line_number":1,"url":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/push.cr"},{"filename":"phoenix/serializer.cr","line_number":1,"url":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/serializer.cr"},{"filename":"phoenix/socket.cr","line_number":1,"url":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr"},{"filename":"phoenix/timer.cr","line_number":1,"url":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/timer.cr"},{"filename":"phoenix/version.cr","line_number":1,"url":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/version.cr"},{"filename":"phoenix.cr","line_number":8,"url":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix.cr"}],"repository_name":"github.com/dtcristo/phoenix.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/dtcristo/phoenix.cr/Phoenix/Channel","path":"Phoenix/Channel.html","kind":"class","full_name":"Phoenix::Channel","name":"Channel","abstract":false,"superclass":{"html_id":"github.com/dtcristo/phoenix.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/dtcristo/phoenix.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/dtcristo/phoenix.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"phoenix/channel.cr","line_number":2,"url":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr"}],"repository_name":"github.com/dtcristo/phoenix.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"EVENTS","name":"EVENTS","value":"{close: \"phx_close\", error: \"phx_error\", join: \"phx_join\", reply: \"phx_reply\", leave: \"phx_leave\"}","doc":null,"summary":null},{"id":"LIFECYCLE_EVENTS","name":"LIFECYCLE_EVENTS","value":"[EVENTS[:close], EVENTS[:error], EVENTS[:join], EVENTS[:reply], EVENTS[:leave]]","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/dtcristo/phoenix.cr/Phoenix","kind":"module","full_name":"Phoenix","name":"Phoenix"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"join(timeout:UInt32=@timeout):Push-instance-method","html_id":"join(timeout:UInt32=@timeout):Push-instance-method","name":"join","doc":"Join the channel\n\nReturns a `Push` instance for binding to reply events with `Push#receive`.\n\n```\nchannel.join\n  .receive \"ok\" do |response|\n    puts \"Joined successfully: #{response}\"\n  end\n  .receive \"error\" do |response|\n    puts \"Unable to join: #{response}\"\n  end\n```","summary":"<p>Join the channel</p>","abstract":false,"args":[{"name":"timeout","doc":null,"default_value":"@timeout","external_name":"timeout","restriction":"UInt32"}],"args_string":"(timeout : UInt32 = @timeout) : Push","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L111","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L111","def":{"name":"join","args":[{"name":"timeout","doc":null,"default_value":"@timeout","external_name":"timeout","restriction":"UInt32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Push","visibility":"Public","body":"if @joined_once\n  raise(\"tried to join multiple times. 'join' can only be called a single time per channel instance\")\nelse\n  @joined_once = true\n  rejoin(timeout)\n  @join_push.try do |join_push|\n    return join_push\n  end\n  raise(\"error, could not return join_push.\")\nend"}},{"id":"leave(timeout=@timeout):Push-instance-method","html_id":"leave(timeout=@timeout):Push-instance-method","name":"leave","doc":"Leaves the channel\n\nUnsubscribes from server events, and instructs channel to terminate on\nserver.\n\n```\nchannel.leave.receive \"ok\" do\n  puts \"Left successfully\"\nend\n```","summary":"<p>Leaves the channel</p>","abstract":false,"args":[{"name":"timeout","doc":null,"default_value":"@timeout","external_name":"timeout","restriction":""}],"args_string":"(timeout = @timeout) : Push","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L195","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L195","def":{"name":"leave","args":[{"name":"timeout","doc":null,"default_value":"@timeout","external_name":"timeout","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Push","visibility":"Public","body":"@state = State::Leaving\non_close = Proc(JSON::Any, Nil).new do |payload|\n  @socket.log(\"channel\", \"leave #{@topic}\")\n  trigger(EVENTS[:close], payload, nil, nil)\nend\nleave_push = Push.new(self, EVENTS[:leave], {} of String => JSON::Any, timeout)\n((leave_push.receive(\"ok\", &on_close)).receive(\"timeout\", &on_close)).send\nif can_push?\nelse\n  leave_push.trigger(\"ok\", {} of String => JSON::Any)\nend\nleave_push\n"}},{"id":"off(event:String,ref:UInt32?=nil)-instance-method","html_id":"off(event:String,ref:UInt32?=nil)-instance-method","name":"off","doc":"Unsubscibes to channel events","summary":"<p>Unsubscibes to channel events</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"String"},{"name":"ref","doc":null,"default_value":"nil","external_name":"ref","restriction":"UInt32 | ::Nil"}],"args_string":"(event : String, ref : UInt32? = <span class=\"n\">nil</span>)","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L156","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L156","def":{"name":"off","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"String"},{"name":"ref","doc":null,"default_value":"nil","external_name":"ref","restriction":"UInt32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@bindings = @bindings.select do |bind|\n  !((bind[:event] == event) && (ref.nil? || (ref == bind[:ref])))\nend"}},{"id":"on(event:String,&block:JSON::Any,String?,String?->):UInt32-instance-method","html_id":"on(event:String,&amp;block:JSON::Any,String?,String?-&gt;):UInt32-instance-method","name":"on","doc":"Subscribes to channel events\n\nSubscription returns a ref counter, which can be used later to\nunsubscribe the exact event listener.\n\n```\nref_1 = channel.on \"event\" do\n  # do stuff\nend\nref_2 = channel.on \"event\" do\n  # do other stuff\nend\nchannel.off(\"event\", ref_1)\n```\nDue to unsubscription, \"do stuff\" won't run,\nwhile \"do other stuff\" will still run on the \"event\".","summary":"<p>Subscribes to channel events</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"String"}],"args_string":"(event : String, &block : JSON::Any, String?, String? -> ) : UInt32","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L149","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L149","def":{"name":"on","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(JSON::Any, String | ::Nil, String | ::Nil -> )"},"return_type":"UInt32","visibility":"Public","body":"ref = @binding_ref = @binding_ref + 1\n@bindings << {event: event, ref: ref, callback: block}\nref\n"}},{"id":"on_close(&block:->):UInt32-instance-method","html_id":"on_close(&amp;block:-&gt;):UInt32-instance-method","name":"on_close","doc":"Hook into channel close","summary":"<p>Hook into channel close</p>","abstract":false,"args":[],"args_string":"(&block :  -> ) : UInt32","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L124","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L124","def":{"name":"on_close","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> )"},"return_type":"UInt32","visibility":"Public","body":"on(EVENTS[:close], &->(payload : JSON::Any, ref : String | ::Nil, join_ref : String | ::Nil) do\n  block.call\nend)"}},{"id":"on_error(&block:JSON::Any,String?,String?->):UInt32-instance-method","html_id":"on_error(&amp;block:JSON::Any,String?,String?-&gt;):UInt32-instance-method","name":"on_error","doc":"Hook into channel errors","summary":"<p>Hook into channel errors</p>","abstract":false,"args":[],"args_string":"(&block : JSON::Any, String?, String? -> ) : UInt32","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L129","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L129","def":{"name":"on_error","args":[],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(JSON::Any, String | ::Nil, String | ::Nil -> )"},"return_type":"UInt32","visibility":"Public","body":"on(EVENTS[:error], &block)"}},{"id":"on_message(&on_message:String?,JSON::Any,String?->JSON::Any)-instance-method","html_id":"on_message(&amp;on_message:String?,JSON::Any,String?-&gt;JSON::Any)-instance-method","name":"on_message","doc":"Overridable message hook\n\nReceives all events for specialized message handling before dispatching to\nthe channel callbacks. Must return the payload, modified or unmodified.\n\n```\nchannel.on_message do |event, payload, ref|\n  # handle payload here\n  handled_payload\nend\n```","summary":"<p>Overridable message hook</p>","abstract":false,"args":[],"args_string":"(&on_message : String?, JSON::Any, String? -> JSON::Any)","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L231","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L231","def":{"name":"on_message","args":[],"double_splat":null,"splat_index":null,"yields":3,"block_arg":{"name":"on_message","doc":null,"default_value":"","external_name":"on_message","restriction":"(String | ::Nil, JSON::Any, String | ::Nil -> JSON::Any)"},"return_type":"","visibility":"Public","body":"@on_message = on_message"}},{"id":"push(event:String,payload:JSON::Any={}ofString=>JSON::Any,timeout:UInt32=@timeout):Push-instance-method","html_id":"push(event:String,payload:JSON::Any={}ofString=&gt;JSON::Any,timeout:UInt32=@timeout):Push-instance-method","name":"push","doc":"Send a message down the channel\n\n```\nchannel.push(\"new_msg\", JSON::Any.new({\"text\" => JSON::Any.new(\"Hello world!\")}))\n```","summary":"<p>Send a message down the channel</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"String"},{"name":"payload","doc":null,"default_value":"{} of String => JSON::Any","external_name":"payload","restriction":"JSON::Any"},{"name":"timeout","doc":null,"default_value":"@timeout","external_name":"timeout","restriction":"UInt32"}],"args_string":"(event : String, payload : JSON::Any = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">JSON</span><span class=\"t\">::</span><span class=\"t\">Any</span>, timeout : UInt32 = @timeout) : Push","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L171","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/channel.cr#L171","def":{"name":"push","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"String"},{"name":"payload","doc":null,"default_value":"{} of String => JSON::Any","external_name":"payload","restriction":"JSON::Any"},{"name":"timeout","doc":null,"default_value":"@timeout","external_name":"timeout","restriction":"UInt32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Push","visibility":"Public","body":"if @joined_once\nelse\n  raise(\"tried to push '#{event}' to '#{@topic}' before joining. Use channel.join() before pushing events\")\nend\npush_event = Push.new(self, event, payload, timeout)\nif can_push?\n  push_event.send\nelse\n  push_event.start_timeout\n  @push_buffer << push_event\nend\npush_event\n"}}],"macros":[],"types":[]},{"html_id":"github.com/dtcristo/phoenix.cr/Phoenix/Push","path":"Phoenix/Push.html","kind":"class","full_name":"Phoenix::Push","name":"Push","abstract":false,"superclass":{"html_id":"github.com/dtcristo/phoenix.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/dtcristo/phoenix.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/dtcristo/phoenix.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"phoenix/push.cr","line_number":4,"url":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/push.cr"}],"repository_name":"github.com/dtcristo/phoenix.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/dtcristo/phoenix.cr/Phoenix","kind":"module","full_name":"Phoenix","name":"Phoenix"},"doc":"A `Push` is returned from `Channel#join`, `Channel#leave` and `Channel#push`\ncalls. Callbacks can be bound to server replies using `#receive`.","summary":"<p>A <code><a href=\"../Phoenix/Push.html\">Push</a></code> is returned from <code><a href=\"../Phoenix/Channel.html#join%28timeout%3AUInt32%3D%40timeout%29%3APush-instance-method\">Channel#join</a></code>, <code><a href=\"../Phoenix/Channel.html#leave%28timeout%3D%40timeout%29%3APush-instance-method\">Channel#leave</a></code> and <code><a href=\"../Phoenix/Channel.html#push%28event%3AString%2Cpayload%3AJSON%3A%3AAny%3D%7B%7DofString%3D%3EJSON%3A%3AAny%2Ctimeout%3AUInt32%3D%40timeout%29%3APush-instance-method\">Channel#push</a></code> calls.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"receive(status:String,&block:JSON::Any->):Push-instance-method","html_id":"receive(status:String,&amp;block:JSON::Any-&gt;):Push-instance-method","name":"receive","doc":"Register a callback for a push reply of a given status\n\nThis example shows registering both \"ok\" and \"error\" callbacks for a\nchannel join push. This also works for general channel pushes (if\nconfigured on the server to reply).\n```\nchannel.join\n  .receive \"ok\" do |response|\n    puts \"Joined successfully: #{response}\"\n  end\n  .receive \"error\" do |response|\n    puts \"Unable to join: #{response}\"\n  end\n```","summary":"<p>Register a callback for a push reply of a given status</p>","abstract":false,"args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"String"}],"args_string":"(status : String, &block : JSON::Any -> ) : Push","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/push.cr#L50","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/push.cr#L50","def":{"name":"receive","args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(JSON::Any -> )"},"return_type":"Push","visibility":"Public","body":"if has_received?(status)\n  @received_resp.try do |resp|\n    yield JSON::Any.new(resp[\"response\"].raw)\n  end\nend\n@receive_hooks << {status: status, callback: block}\nself\n"}}],"macros":[],"types":[]},{"html_id":"github.com/dtcristo/phoenix.cr/Phoenix/Socket","path":"Phoenix/Socket.html","kind":"class","full_name":"Phoenix::Socket","name":"Socket","abstract":false,"superclass":{"html_id":"github.com/dtcristo/phoenix.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/dtcristo/phoenix.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/dtcristo/phoenix.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"phoenix/socket.cr","line_number":17,"url":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr"}],"repository_name":"github.com/dtcristo/phoenix.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEFAULT_HEARTBEAT_INTERVAL_MS","name":"DEFAULT_HEARTBEAT_INTERVAL_MS","value":"30000_u32","doc":"Default heartbeat interval in milliseconds","summary":"<p>Default heartbeat interval in milliseconds</p>"},{"id":"DEFAULT_RECONNECT_AFTER_MS","name":"DEFAULT_RECONNECT_AFTER_MS","value":"Proc(UInt32, UInt32).new do |tries|\n  [1000_u32, 2000_u32, 5000_u32, 10000_u32].fetch(tries - 1) do\n    10000_u32\n  end\nend","doc":"Default reconnection timeout implements stepped backoff","summary":"<p>Default reconnection timeout implements stepped backoff</p>"},{"id":"DEFAULT_TIMEOUT","name":"DEFAULT_TIMEOUT","value":"10000_u32","doc":"Default timeout in milliseconds to trigger push timeouts","summary":"<p>Default timeout in milliseconds to trigger push timeouts</p>"},{"id":"VSN","name":"VSN","value":"\"2.0.0\"","doc":"Wire protocol version","summary":"<p>Wire protocol version</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/dtcristo/phoenix.cr/Phoenix","kind":"module","full_name":"Phoenix","name":"Phoenix"},"doc":"A single connection is established to the server and channels are\nmultiplexed over the connection. Connect to the server using the Socket\nclass:\n\n```\nsocket = Phoenix::Socket.new(\n  \"http://example.com/socket\",\n  params: {\"userToken\" => \"123\"}\n)\nsocket.connect\n```\n\nThe Socket constructor takes the endpoint of the socket, the\nauthentication params, as well as options that can be found below, such as\nconfiguring the logger, and heartbeat.","summary":"<p>A single connection is established to the server and channels are multiplexed over the connection.</p>","class_methods":[],"constructors":[{"id":"new(endpoint:URI|String,headers:HTTP::Headers=HTTP::Headers.new,timeout:UInt32=DEFAULT_TIMEOUT,encode:Message->String=->(msg:Message)do\nSerializer.encode(msg)\nend,decode:String->Message=->(raw_msg:String)do\nSerializer.decode(raw_msg)\nend,heartbeat_interval_ms:UInt32=DEFAULT_HEARTBEAT_INTERVAL_MS,reconnect_after_ms:UInt32->UInt32=DEFAULT_RECONNECT_AFTER_MS,logger:String,String,JSON::Any->?=nil,params={}ofString=>String)-class-method","html_id":"new(endpoint:URI|String,headers:HTTP::Headers=HTTP::Headers.new,timeout:UInt32=DEFAULT_TIMEOUT,encode:Message-&gt;String=-&gt;(msg:Message)do\nSerializer.encode(msg)\nend,decode:String-&gt;Message=-&gt;(raw_msg:String)do\nSerializer.decode(raw_msg)\nend,heartbeat_interval_ms:UInt32=DEFAULT_HEARTBEAT_INTERVAL_MS,reconnect_after_ms:UInt32-&gt;UInt32=DEFAULT_RECONNECT_AFTER_MS,logger:String,String,JSON::Any-&gt;?=nil,params={}ofString=&gt;String)-class-method","name":"new","doc":"Create a socket with a provided endpoint URI or string\n\n```\nsocket = Phoenix::Socket.new(\"http://example.com/socket\")\n```\n\nOptionally provide keyword arguments for the following:\n * `headers`: connection headers\n * `timeout`: timeout in milliseconds to trigger push timeouts\n * `encode`: proc to encode outgoing messages\n * `decode`: proc to decode incoming messages\n * `heartbeat_interval_ms`: millisecond interval to send a heartbeat message\n * `reconnect_after_ms`: proc that returns the millisecond reconnect interval\n * `logger`: proc for specialized logging\n * `params`: params to pass when connecting","summary":"<p>Create a socket with a provided endpoint URI or string</p>","abstract":false,"args":[{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"URI | String"},{"name":"headers","doc":null,"default_value":"HTTP::Headers.new","external_name":"headers","restriction":"HTTP::Headers"},{"name":"timeout","doc":null,"default_value":"DEFAULT_TIMEOUT","external_name":"timeout","restriction":"UInt32"},{"name":"encode","doc":null,"default_value":"->(msg : Message) do\n  Serializer.encode(msg)\nend","external_name":"encode","restriction":"(Message -> String)"},{"name":"decode","doc":null,"default_value":"->(raw_msg : String) do\n  Serializer.decode(raw_msg)\nend","external_name":"decode","restriction":"(String -> Message)"},{"name":"heartbeat_interval_ms","doc":null,"default_value":"DEFAULT_HEARTBEAT_INTERVAL_MS","external_name":"heartbeat_interval_ms","restriction":"UInt32"},{"name":"reconnect_after_ms","doc":null,"default_value":"DEFAULT_RECONNECT_AFTER_MS","external_name":"reconnect_after_ms","restriction":"(UInt32 -> UInt32)"},{"name":"logger","doc":null,"default_value":"nil","external_name":"logger","restriction":"(String, String, JSON::Any -> ) | ::Nil"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":""}],"args_string":"(endpoint : URI | String, headers : HTTP::Headers = <span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Headers</span>.<span class=\"k\">new</span>, timeout : UInt32 = <span class=\"t\">DEFAULT_TIMEOUT</span>, encode : Message -> String = ->(msg : <span class=\"t\">Message</span>) <span class=\"k\">do</span>\n  <span class=\"t\">Serializer</span>.encode(msg)\n<span class=\"k\">end</span>, decode : String -> Message = ->(raw_msg : <span class=\"t\">String</span>) <span class=\"k\">do</span>\n  <span class=\"t\">Serializer</span>.decode(raw_msg)\n<span class=\"k\">end</span>, heartbeat_interval_ms : UInt32 = <span class=\"t\">DEFAULT_HEARTBEAT_INTERVAL_MS</span>, reconnect_after_ms : UInt32 -> UInt32 = <span class=\"t\">DEFAULT_RECONNECT_AFTER_MS</span>, logger : String, String, JSON::Any -> ? = <span class=\"n\">nil</span>, params = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>)","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L51","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L51","def":{"name":"new","args":[{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"URI | String"},{"name":"headers","doc":null,"default_value":"HTTP::Headers.new","external_name":"headers","restriction":"HTTP::Headers"},{"name":"timeout","doc":null,"default_value":"DEFAULT_TIMEOUT","external_name":"timeout","restriction":"UInt32"},{"name":"encode","doc":null,"default_value":"->(msg : Message) do\n  Serializer.encode(msg)\nend","external_name":"encode","restriction":"(Message -> String)"},{"name":"decode","doc":null,"default_value":"->(raw_msg : String) do\n  Serializer.decode(raw_msg)\nend","external_name":"decode","restriction":"(String -> Message)"},{"name":"heartbeat_interval_ms","doc":null,"default_value":"DEFAULT_HEARTBEAT_INTERVAL_MS","external_name":"heartbeat_interval_ms","restriction":"UInt32"},{"name":"reconnect_after_ms","doc":null,"default_value":"DEFAULT_RECONNECT_AFTER_MS","external_name":"reconnect_after_ms","restriction":"(UInt32 -> UInt32)"},{"name":"logger","doc":null,"default_value":"nil","external_name":"logger","restriction":"(String, String, JSON::Any -> ) | ::Nil"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(endpoint, headers, timeout, encode, decode, heartbeat_interval_ms, reconnect_after_ms, logger, params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(host:String=&quot;localhost&quot;,path:String=&quot;/socket&quot;,port:Int32?=4000,tls:Bool=false,headers:HTTP::Headers=HTTP::Headers.new,timeout:UInt32=DEFAULT_TIMEOUT,encode:Message->String=->(msg:Message)do\nSerializer.encode(msg)\nend,decode:String->Message=->(raw_msg:String)do\nSerializer.decode(raw_msg)\nend,heartbeat_interval_ms:UInt32=DEFAULT_HEARTBEAT_INTERVAL_MS,reconnect_after_ms:UInt32->UInt32=DEFAULT_RECONNECT_AFTER_MS,logger:String,String,JSON::Any->?=nil,params={}ofString=>String)-class-method","html_id":"new(host:String=&amp;quot;localhost&amp;quot;,path:String=&amp;quot;/socket&amp;quot;,port:Int32?=4000,tls:Bool=false,headers:HTTP::Headers=HTTP::Headers.new,timeout:UInt32=DEFAULT_TIMEOUT,encode:Message-&gt;String=-&gt;(msg:Message)do\nSerializer.encode(msg)\nend,decode:String-&gt;Message=-&gt;(raw_msg:String)do\nSerializer.decode(raw_msg)\nend,heartbeat_interval_ms:UInt32=DEFAULT_HEARTBEAT_INTERVAL_MS,reconnect_after_ms:UInt32-&gt;UInt32=DEFAULT_RECONNECT_AFTER_MS,logger:String,String,JSON::Any-&gt;?=nil,params={}ofString=&gt;String)-class-method","name":"new","doc":"Create a socket with a provided host, path, port and tls state\n\n```\nsocket = Phoenix::Socket.new(\n  host: \"example.com\", path: \"/socket\", port: 80, tls: false\n)\n```\n\nOptional keyword arguments may be provided as above.","summary":"<p>Create a socket with a provided host, path, port and tls state</p>","abstract":false,"args":[{"name":"host","doc":null,"default_value":"\"localhost\"","external_name":"host","restriction":"String"},{"name":"path","doc":null,"default_value":"\"/socket\"","external_name":"path","restriction":"String"},{"name":"port","doc":null,"default_value":"4000","external_name":"port","restriction":"Int32 | ::Nil"},{"name":"tls","doc":null,"default_value":"false","external_name":"tls","restriction":"Bool"},{"name":"headers","doc":null,"default_value":"HTTP::Headers.new","external_name":"headers","restriction":"HTTP::Headers"},{"name":"timeout","doc":null,"default_value":"DEFAULT_TIMEOUT","external_name":"timeout","restriction":"UInt32"},{"name":"encode","doc":null,"default_value":"->(msg : Message) do\n  Serializer.encode(msg)\nend","external_name":"encode","restriction":"(Message -> String)"},{"name":"decode","doc":null,"default_value":"->(raw_msg : String) do\n  Serializer.decode(raw_msg)\nend","external_name":"decode","restriction":"(String -> Message)"},{"name":"heartbeat_interval_ms","doc":null,"default_value":"DEFAULT_HEARTBEAT_INTERVAL_MS","external_name":"heartbeat_interval_ms","restriction":"UInt32"},{"name":"reconnect_after_ms","doc":null,"default_value":"DEFAULT_RECONNECT_AFTER_MS","external_name":"reconnect_after_ms","restriction":"(UInt32 -> UInt32)"},{"name":"logger","doc":null,"default_value":"nil","external_name":"logger","restriction":"(String, String, JSON::Any -> ) | ::Nil"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":""}],"args_string":"(host : String = <span class=\"s\">&quot;localhost&quot;</span>, path : String = <span class=\"s\">&quot;/socket&quot;</span>, port : Int32? = <span class=\"n\">4000</span>, tls : Bool = <span class=\"n\">false</span>, headers : HTTP::Headers = <span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Headers</span>.<span class=\"k\">new</span>, timeout : UInt32 = <span class=\"t\">DEFAULT_TIMEOUT</span>, encode : Message -> String = ->(msg : <span class=\"t\">Message</span>) <span class=\"k\">do</span>\n  <span class=\"t\">Serializer</span>.encode(msg)\n<span class=\"k\">end</span>, decode : String -> Message = ->(raw_msg : <span class=\"t\">String</span>) <span class=\"k\">do</span>\n  <span class=\"t\">Serializer</span>.decode(raw_msg)\n<span class=\"k\">end</span>, heartbeat_interval_ms : UInt32 = <span class=\"t\">DEFAULT_HEARTBEAT_INTERVAL_MS</span>, reconnect_after_ms : UInt32 -> UInt32 = <span class=\"t\">DEFAULT_RECONNECT_AFTER_MS</span>, logger : String, String, JSON::Any -> ? = <span class=\"n\">nil</span>, params = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>)","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L88","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L88","def":{"name":"new","args":[{"name":"host","doc":null,"default_value":"\"localhost\"","external_name":"host","restriction":"String"},{"name":"path","doc":null,"default_value":"\"/socket\"","external_name":"path","restriction":"String"},{"name":"port","doc":null,"default_value":"4000","external_name":"port","restriction":"Int32 | ::Nil"},{"name":"tls","doc":null,"default_value":"false","external_name":"tls","restriction":"Bool"},{"name":"headers","doc":null,"default_value":"HTTP::Headers.new","external_name":"headers","restriction":"HTTP::Headers"},{"name":"timeout","doc":null,"default_value":"DEFAULT_TIMEOUT","external_name":"timeout","restriction":"UInt32"},{"name":"encode","doc":null,"default_value":"->(msg : Message) do\n  Serializer.encode(msg)\nend","external_name":"encode","restriction":"(Message -> String)"},{"name":"decode","doc":null,"default_value":"->(raw_msg : String) do\n  Serializer.decode(raw_msg)\nend","external_name":"decode","restriction":"(String -> Message)"},{"name":"heartbeat_interval_ms","doc":null,"default_value":"DEFAULT_HEARTBEAT_INTERVAL_MS","external_name":"heartbeat_interval_ms","restriction":"UInt32"},{"name":"reconnect_after_ms","doc":null,"default_value":"DEFAULT_RECONNECT_AFTER_MS","external_name":"reconnect_after_ms","restriction":"(UInt32 -> UInt32)"},{"name":"logger","doc":null,"default_value":"nil","external_name":"logger","restriction":"(String, String, JSON::Any -> ) | ::Nil"},{"name":"params","doc":null,"default_value":"{} of String => String","external_name":"params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(host, path, port, tls, headers, timeout, encode, decode, heartbeat_interval_ms, reconnect_after_ms, logger, params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"channel(topic:String,params={}ofString=>JSON::Any):Channel-instance-method","html_id":"channel(topic:String,params={}ofString=&gt;JSON::Any):Channel-instance-method","name":"channel","doc":"Initiates a new channel for the given topic\n\n```\nchannel = socket.channel(\"topic:subtopic\")\n```","summary":"<p>Initiates a new channel for the given topic</p>","abstract":false,"args":[{"name":"topic","doc":null,"default_value":"","external_name":"topic","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => JSON::Any","external_name":"params","restriction":""}],"args_string":"(topic : String, params = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">JSON</span><span class=\"t\">::</span><span class=\"t\">Any</span>) : Channel","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L255","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L255","def":{"name":"channel","args":[{"name":"topic","doc":null,"default_value":"","external_name":"topic","restriction":"String"},{"name":"params","doc":null,"default_value":"{} of String => JSON::Any","external_name":"params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Channel","visibility":"Public","body":"chan = Channel.new(topic, params, self)\nchan.setup\nchannels << chan\nchan\n"}},{"id":"connect-instance-method","html_id":"connect-instance-method","name":"connect","doc":"Initiates the WebSocket and spawns a connection fiber","summary":"<p>Initiates the WebSocket and spawns a connection fiber</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L156","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L156","def":{"name":"connect","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  if @conn.nil?\n  else\n    return\n  end\n  @conn = conn = HTTP::WebSocket.new(@host, \"#{@path}/websocket?#{conn_query()}\", port: @port, tls: @tls, headers: @headers)\n  conn.on_close do |raw_msg|\n    on_conn_close(raw_msg)\n  end\n  conn.on_message do |raw_msg|\n    on_conn_message(raw_msg)\n  end\n  conn.on_binary do |raw_msg|\n    on_conn_binary(raw_msg)\n  end\n  spawn do\n    begin\n      conn.run\n    rescue e\n      reason = e.message || \"\"\n      on_conn_error(reason)\n      on_conn_close(reason)\n    end\n  end\n  Fiber.yield\n  on_conn_open()\nrescue e\n  reason = e.message || \"\"\n  on_conn_error(reason)\n  on_conn_close(reason)\nend"}},{"id":"connected?:Bool-instance-method","html_id":"connected?:Bool-instance-method","name":"connected?","doc":"Whether the socket is connected or not","summary":"<p>Whether the socket is connected or not</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L241","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L241","def":{"name":"connected?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"connection_state() == \"open\""}},{"id":"disconnect(callback:->?=nil,reason:String?=nil)-instance-method","html_id":"disconnect(callback:-&gt;?=nil,reason:String?=nil)-instance-method","name":"disconnect","doc":null,"summary":null,"abstract":false,"args":[{"name":"callback","doc":null,"default_value":"nil","external_name":"callback","restriction":"(-> ) | ::Nil"},{"name":"reason","doc":null,"default_value":"nil","external_name":"reason","restriction":"String | ::Nil"}],"args_string":"(callback :  -> ? = <span class=\"n\">nil</span>, reason : String? = <span class=\"n\">nil</span>)","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L141","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L141","def":{"name":"disconnect","args":[{"name":"callback","doc":null,"default_value":"nil","external_name":"callback","restriction":"(-> ) | ::Nil"},{"name":"reason","doc":null,"default_value":"nil","external_name":"reason","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@conn.try do |conn|\n  conn.on_close do\n  end\n  begin\n    conn.close(reason)\n  rescue\n  end\n  @conn = nil\nend\ncallback.try(&.call())\n"}},{"id":"on_close(&block:String->)-instance-method","html_id":"on_close(&amp;block:String-&gt;)-instance-method","name":"on_close","doc":"Registers callbacks for connection close events\n\n```\nsocket.on_close do |raw_msg|\n  puts \"close callback: #{raw_msg}\"\nend\n```","summary":"<p>Registers callbacks for connection close events</p>","abstract":false,"args":[],"args_string":"(&block : String -> )","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L207","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L207","def":{"name":"on_close","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(String -> )"},"return_type":"","visibility":"Public","body":"@state_change_callbacks[:close] << block"}},{"id":"on_error(&block:String->)-instance-method","html_id":"on_error(&amp;block:String-&gt;)-instance-method","name":"on_error","doc":"Registers callbacks for connection error events\n\n```\nsocket.on_error do |raw_msg|\n  puts \"error callback: #{raw_msg}\"\nend\n```","summary":"<p>Registers callbacks for connection error events</p>","abstract":false,"args":[],"args_string":"(&block : String -> )","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L218","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L218","def":{"name":"on_error","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(String -> )"},"return_type":"","visibility":"Public","body":"@state_change_callbacks[:error] << block"}},{"id":"on_message(&block:String->)-instance-method","html_id":"on_message(&amp;block:String-&gt;)-instance-method","name":"on_message","doc":"Registers callbacks for connection message events\n\n```\nsocket.on_message do |raw_msg|\n  puts \"message callback: #{raw_msg}\"\nend\n```","summary":"<p>Registers callbacks for connection message events</p>","abstract":false,"args":[],"args_string":"(&block : String -> )","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L229","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L229","def":{"name":"on_message","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(String -> )"},"return_type":"","visibility":"Public","body":"@state_change_callbacks[:message] << block"}},{"id":"on_open(&block:->)-instance-method","html_id":"on_open(&amp;block:-&gt;)-instance-method","name":"on_open","doc":"Registers callbacks for connection open events\n\n```\nsocket.on_open do\n  puts \"open callback\"\nend\n```","summary":"<p>Registers callbacks for connection open events</p>","abstract":false,"args":[],"args_string":"(&block :  -> )","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L196","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L196","def":{"name":"on_open","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> )"},"return_type":"","visibility":"Public","body":"@state_change_callbacks[:open] << block"}},{"id":"remove(channel:Channel)-instance-method","html_id":"remove(channel:Channel)-instance-method","name":"remove","doc":"Removes a previously initiated channel","summary":"<p>Removes a previously initiated channel</p>","abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel"}],"args_string":"(channel : Channel)","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L246","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/socket.cr#L246","def":{"name":"remove","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@channels = @channels.select do |c|\n  c.join_ref != channel.join_ref\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/dtcristo/phoenix.cr/Phoenix/Timer","path":"Phoenix/Timer.html","kind":"class","full_name":"Phoenix::Timer","name":"Timer","abstract":false,"superclass":{"html_id":"github.com/dtcristo/phoenix.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/dtcristo/phoenix.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/dtcristo/phoenix.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"phoenix/timer.cr","line_number":15,"url":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/timer.cr"}],"repository_name":"github.com/dtcristo/phoenix.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/dtcristo/phoenix.cr/Phoenix","kind":"module","full_name":"Phoenix","name":"Phoenix"},"doc":"Creates a timer that accepts a `delay_calc` proc to perform\ncalculated timeout retries, such as exponential backoff.\n\n```\nreconnect_timer = Phoenix::Timer.new(\n  ->{ connect() },\n  ->(count : UInt32) { [1000_u32, 5000_u32, 10_000_u32].fetch(count - 1) { 10_000_u32 } }\n)\nreconnect_timer.schedule_timeout # fires after 1000\nreconnect_timer.schedule_timeout # fires after 5000\nreconnect_timer.reset\nreconnect_timer.schedule_timeout # fires after 1000\n```","summary":"<p>Creates a timer that accepts a <code>delay_calc</code> proc to perform calculated timeout retries, such as exponential backoff.</p>","class_methods":[],"constructors":[{"id":"new(callback:->,delay:UInt32,repeat:Bool=false)-class-method","html_id":"new(callback:-&gt;,delay:UInt32,repeat:Bool=false)-class-method","name":"new","doc":"Create a basic timer with a fixed delay","summary":"<p>Create a basic timer with a fixed delay</p>","abstract":false,"args":[{"name":"callback","doc":null,"default_value":"","external_name":"callback","restriction":"(-> )"},{"name":"delay","doc":null,"default_value":"","external_name":"delay","restriction":"UInt32"},{"name":"repeat","doc":null,"default_value":"false","external_name":"repeat","restriction":"Bool"}],"args_string":"(callback :  -> , delay : UInt32, repeat : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/timer.cr#L19","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/timer.cr#L19","def":{"name":"new","args":[{"name":"callback","doc":null,"default_value":"","external_name":"callback","restriction":"(-> )"},{"name":"delay","doc":null,"default_value":"","external_name":"delay","restriction":"UInt32"},{"name":"repeat","doc":null,"default_value":"false","external_name":"repeat","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(callback, delay, repeat)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(callback:->,delay_calc:UInt32->UInt32,repeat:Bool=false)-class-method","html_id":"new(callback:-&gt;,delay_calc:UInt32-&gt;UInt32,repeat:Bool=false)-class-method","name":"new","doc":"Create a dynamic timer with a delay based on the count","summary":"<p>Create a dynamic timer with a delay based on the count</p>","abstract":false,"args":[{"name":"callback","doc":null,"default_value":"","external_name":"callback","restriction":"(-> )"},{"name":"delay_calc","doc":null,"default_value":"","external_name":"delay_calc","restriction":"(UInt32 -> UInt32)"},{"name":"repeat","doc":null,"default_value":"false","external_name":"repeat","restriction":"Bool"}],"args_string":"(callback :  -> , delay_calc : UInt32 -> UInt32, repeat : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/timer.cr#L24","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/timer.cr#L24","def":{"name":"new","args":[{"name":"callback","doc":null,"default_value":"","external_name":"callback","restriction":"(-> )"},{"name":"delay_calc","doc":null,"default_value":"","external_name":"delay_calc","restriction":"(UInt32 -> UInt32)"},{"name":"repeat","doc":null,"default_value":"false","external_name":"repeat","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(callback, delay_calc, repeat)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"reset-instance-method","html_id":"reset-instance-method","name":"reset","doc":"Cancels any previous `schedule_timeout` and resets the count","summary":"<p>Cancels any previous <code><a href=\"../Phoenix/Timer.html#schedule_timeout-instance-method\">#schedule_timeout</a></code> and resets the count</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/timer.cr#L31","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/timer.cr#L31","def":{"name":"reset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@count = 0_u32\n@active_timeouts[@last_id] = false\n"}},{"id":"schedule_timeout-instance-method","html_id":"schedule_timeout-instance-method","name":"schedule_timeout","doc":"Cancels any previous `schedule_timeout` and schedules callback","summary":"<p>Cancels any previous <code><a href=\"../Phoenix/Timer.html#schedule_timeout-instance-method\">#schedule_timeout</a></code> and schedules callback</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/timer.cr#L37","source_link":"https://github.com/dtcristo/phoenix.cr/blob/f11fc298c5fd3bbaa69c6a661ad2088e08894afc/src/phoenix/timer.cr#L37","def":{"name":"schedule_timeout","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@active_timeouts[@last_id] = false\nid = @last_id = @last_id + 1\n@active_timeouts[id] = true\nspawn do\n  sleep((@delay_calc.call(@count + 1)) * 0.001)\n  if @active_timeouts[id]\n    @count = @count + 1\n    @callback.call\n    if @repeat\n      schedule_timeout()\n    end\n  end\nend\nFiber.yield\n"}}],"macros":[],"types":[]}]}]}})